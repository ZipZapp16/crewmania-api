// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Version {
  id          String   @id @unique @default(uuid())
  number      Decimal
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("versions")
}

model Log {
  id          String   @id @unique @default(uuid())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("logs")
}

model User {
  id                 String           @id @unique @default(uuid())
  name               String
  lastname           String
  secondLastname     String?
  email              String           @unique
  password           String
  dateAdmission      DateTime?
  phone              String?
  profilePicture     String?
  loginOption        String
  firebaseToken      String?
  // * Relations
  position           Position         @relation(fields: [positionId], references: [id])
  positionId         String           @unique
  herarchy           Hierarchy        @relation(fields: [hierarchyId], references: [id])
  hierarchyId        String           @unique
  userValidationForm ValidationForm   @relation(fields: [validationFormId], references: [id])
  validationFormId   String           @unique
  headquarter        Headquarter      @relation(fields: [headquaerterId], references: [id])
  headquaerterId     String           @unique
  statusValidation   StatusValidation @relation(fields: [statusValidationId], references: [id])
  statusValidationId String           @unique
  membership         Membership       @relation(fields: [membershipId], references: [id])
  membershipId       String           @unique
  // * End Relations
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@map("users")
}

model Position {
  id          String   @id @unique @default(uuid())
  name        String
  description String
  // * Relations
  position    User?
  // * End Relations
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("positions")
}

model Hierarchy {
  id           String   @id @unique @default(uuid())
  name         String
  // * Relations
  userHerarchy User?
  // * End Relations
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("hierarchys")
}

model ValidationForm {
  id                 String     @id @unique @default(uuid())
  name               String
  // * Relations
  userValidationForm User?
  profiles           Profile    @relation(fields: [profileId], references: [id])
  profileId          String
  photograph         Photograph @relation(fields: [photographId], references: [id])
  photographId       String     @unique
  // * End Relations
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@map("validationForms")
}

model Profile {
  id             String           @id @unique @default(uuid())
  profileUrl     String
  // * Relations
  ValidationForm ValidationForm[]
  // * End Relations
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("profiles")
}

model Photograph {
  id             String          @id @unique @default(uuid())
  photographUrl  String
  type           String
  validationForm ValidationForm?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("photographs")
}

model Headquarter {
  id              String   @id @unique @default(uuid())
  name            String
  location        String
  // * Relations
  userHeadQuarter User?
  // * End Relations
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("headquarters")
}

model StatusValidation {
  id                   String   @id @unique @default(uuid())
  status               String
  reason               String
  // * Relations
  userStatusValidation User?
  // * End Relations
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("statusvalidations")
}

model Membership {
  id                 String          @id @unique @default(uuid())
  name               String
  cost               Decimal
  // * Relations
  membershipOffers   MembershipOffer @relation(fields: [membershipOffersId], references: [id])
  membershipOffersId String
  userMembership     User?
  // * End Relations
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  @@map("memberships")
}

model MembershipOffer {
  id             String       @id @unique @default(uuid())
  name           String
  percetageOffer Decimal
  duration       String?
  dateStart      DateTime?
  dateEnd        DateTime?
  // * Relations
  memberships    Membership[]
  // * End Relations
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("membershipOffers")
}
