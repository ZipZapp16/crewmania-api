// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Version {
  id          String   @id @unique @default(uuid())
  number      Decimal
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("versions")
}

model Log {
  id          String   @id @unique @default(uuid())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("logs")
}

model User {
  id             String          @id @unique @default(uuid())
  name           String
  lastname       String
  secondLastname String?
  email          String          @unique
  password       String
  dateAdmission  DateTime?
  phone          String?
  profilePicture String?
  loginOption    String
  firebaseToken  String?
  // * Relations
  userOccupancy  UserOccupancy?
  userMembership UserMembership[]
  userValidation UserValidation?
  // * End Relations
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("users")
}

model UserOccupancy {
  id                  String             @id @unique @default(uuid())
  // * Relations
  headquarter         Headquarter        @relation(fields: [headquarterId], references: [id])
  headquarterId       String
  user                User?              @relation(fields: [userId], references: [id])
  userId              String?            @unique
  positionsHerarchy   PositionsHerarchy? @relation(fields: [positionsHerarchyId], references: [id])
  positionsHerarchyId String
  // * End Relations
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  @@map("userOccupancy")
}

model PositionsHerarchy {
  id            String          @id @default(uuid())
  // * Relations
  position      Position        @relation(fields: [positionId], references: [id])
  positionId    String
  hierarchy     Hierarchy       @relation(fields: [hierarchyId], references: [id])
  hierarchyId   String
  userOccupancy UserOccupancy[]
  // * End Relations
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("positionsHerarchys")
}

model Position {
  id                String              @id @unique @default(uuid())
  name              String
  // * Relations
  positionsHerarchy PositionsHerarchy[]
  // * End Relations
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@map("positions")
}

model Hierarchy {
  id                String              @id @unique @default(uuid())
  name              String
  // * Relations
  positionsHerarchy PositionsHerarchy[]
  // * End Relations
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@map("hierarchys")
}

model Headquarter {
  id            String          @id @unique @default(uuid())
  code          String
  name          String
  country       String
  state         String
  city          String
  // * Relations
  UserOccupancy UserOccupancy[]
  // * End Relations
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("headquarters")
}

model UserMembership {
  id                String   @id @unique @default(uuid())
  dateStart         DateTime @default(now())
  dateEnd           DateTime
  renovation        Boolean
  // * Relations
  user              User?    @relation(fields: [userId], references: [id])
  userId            String?
  membershipOffer MembershipOffer @relation(fields: [membershipId], references: [id])
  membershipId String
  // * End Relations
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("userMemberships")
}

model Membership {
  id              String            @id @unique @default(uuid())
  level           String
  type            String
  cost            Decimal
  currency        String
  durationDays    Int
  // * Relations
  membershipOffer MembershipOffer[]
  // * End Relations
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("memberships")
}

model Offer {
  id              String            @id @unique @default(uuid())
  name            String
  percentageOffer Decimal
  dateStart       DateTime?
  dateEnd         DateTime?
  enabled         Boolean
  // * Relations
  membershipOffer MembershipOffer[]
  // * End Relations
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("offers")
}

model MembershipOffer {
  id           String     @id @unique @default(uuid())
  // * Relations
  membership   Membership @relation(fields: [membershipId], references: [id])
  membershipId String
  offer        Offer?     @relation(fields: [offerId], references: [id])
  offerId      String
  userMembership UserMembership[]
  // * End Relations
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("membershipOffers")
}

model UserValidation {
  id                 String           @id @unique @default(uuid())
  // * Relations
  validationForm     ValidationForm   @relation(fields: [validationFormId], references: [id])
  validationFormId   String           @unique
  statusValidation   StatusValidation @relation(fields: [statusValidationId], references: [id])
  statusValidationId String
  user               User?            @relation(fields: [userId], references: [id])
  userId             String?          @unique
  // * End Relations
  url                String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@map("userValidations")
}

model ValidationForm {
  id             String          @id @unique @default(uuid())
  type           String
  description    String
  // * Relations
  userValidation UserValidation?
  // * End Relations
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("validationForms")
}

model StatusValidation {
  id             String           @id @unique @default(uuid())
  type           String
  reason         String
  // * Relations
  userValidation UserValidation[]
  // * End Relations
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("statusValidations")
}
